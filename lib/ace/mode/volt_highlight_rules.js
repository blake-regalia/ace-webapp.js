/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from ../scrap/volt.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var VoltHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#comment"
        }, {
            include: "#prefix"
        }, {
            include: "#method"
        }, {
            include: "#method-instance"
        }, {
            include: "#property"
        }],
        "#comment": [{
            token: "comment.block.volt",
            regex: /\/\*/,
            push: [{
                token: "comment.block.volt",
                regex: /\*\//,
                next: "pop"
            }, {
                defaultToken: "comment.block.volt"
            }]
        }, {
            token: "comment.line.volt",
            regex: /#/,
            push: [{
                token: "comment.line.volt",
                regex: /$|$/,
                next: "pop"
            }, {
                defaultToken: "comment.line.volt"
            }]
        }],
        "#string": [{
            token: "string.quoted.single.volt",
            regex: /'/,
            push: [{
                token: "string.quoted.single.volt",
                regex: /'/,
                next: "pop"
            }, {
                token: "invalid.string.newline",
                regex: /$/
            }, {
                token: "constant.character.escape.volt",
                regex: /\\./
            }, {
                defaultToken: "string.quoted.single.volt"
            }]
        }],
        "#prefix": [{
            token: ["support.constant.other.prefix.volt", "text"],
            regex: /(prefix)(\s*\{)/,
            push: [{
                token: "text",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#prefix-definition"
            }]
        }, {
            token: ["support.constant.other.prefix.volt", "text"],
            regex: /(prefix)(\s*)(?=\w*:)/,
            push: [{
                token: "text",
                regex: /$/,
                next: "pop"
            }, {
                include: "#prefix-definition"
            }]
        }],
        "#prefix-definition": [{
            token: "constant.language.prefixed-name.volt",
            regex: /\w*:\w*/
        }, {
            token: "string.unquoted.uri.volt",
            regex: /</,
            push: [{
                token: "string.unquoted.uri.volt",
                regex: />/,
                next: "pop"
            }, {
                defaultToken: "string.unquoted.uri.volt"
            }]
        }],
        "#property": [{
            token: [
                "support.constant.other.property.volt",
                "text",
                "entity.name.function.volt",
                "text",
                "support.constant.extends.volt",
                "text",
                "entity.name.class.super-class.volt",
                "text"
            ],
            regex: /((?:(?:abstract|transitive)\s+)?property)(\s+)(\w*:\w*)(?:(\s+)(extends)(\s+)(\w*:\w*))?(\s*\{)/,
            push: [{
                token: "text",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#body"
            }]
        }],
        "#method": [{
            token: [
                "support.constant.other.method.volt",
                "text",
                "entity.name.function.volt",
                "text",
                "support.constant.extends.volt",
                "text",
                "entity.name.class.super-class.volt",
                "text"
            ],
            regex: /((?:abstract\s+)?method)(\s+)(\w*:\w*)(?:(\s+)(extends)(\s+)(\w*:\w*))?(\s*\{)/,
            push: [{
                token: "text",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#body"
            }]
        }],
        "#body": [{
            include: "#comment"
        }, {
            include: "#version"
        }, {
            include: "#field"
        }, {
            include: "#block"
        }, {
            include: "#code"
        }, {
            include: "#return"
        }, {
            include: "#output"
        }],
        "#version": [{
            token: "keyword.operator.stage.volt",
            regex: /\bversion/,
            push: [{
                token: "text",
                regex: /$/,
                next: "pop"
            }, {
                include: "#string"
            }]
        }],
        "#field": [{
            token: ["keyword.operator.stage.volt", "text"],
            regex: /\b(abstract|input|subject|object|fetch)(\s+)(?=\?)/,
            push: [{
                token: "text",
                regex: /(?=$|\{|\[)/,
                next: "pop"
            }, {
                include: "#field-body"
            }]
        }, {
            include: "#pattern"
        }],
        "#block": [{
            token: ["keyword.operator.stage.volt", "text", "text"],
            regex: /\b(abstract|input|subject|object|fetch)(\s*)(\{)/,
            push: [{
                token: "text",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#comment"
            }, {
                include: "#field-body"
            }]
        }],
        "#code": [{
            token: ["keyword.operator.stage.volt", "text"],
            regex: /\b(using|evaluate)(\s+)(?=\?)/,
            push: [{
                token: "text",
                regex: /(?=$|,)/,
                next: "pop"
            }, {
                include: "#target"
            }]
        }, {
            include: "#code-block"
        }],
        "#code-block": [{
            token: ["keyword.operator.stage.volt", "text", "text"],
            regex: /\b(using|evaluate)(\s)(\{)/,
            push: [{
                token: "text",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#target"
            }]
        }],
        "#return": [{
            token: "keyword.operator.stage.volt",
            regex: /\breturn/,
            push: [{
                token: "text",
                regex: /(?=$)/,
                next: "pop"
            }, {
                include: "#expression"
            }]
        }],
        "#output": [{
            token: ["keyword.operator.stage.volt", "text"],
            regex: /\b(output)(\s*)(?=\{|\[)/,
            push: [{
                token: "text",
                regex: /(?=\}|\])/,
                next: "pop"
            }, {
                include: "#pattern"
            }]
        }],
        "#target": [{
            include: "#field-variable"
        }, {
            include: "#field-assignment"
        }],
        "#expression": [{
            token: "string.unquoted.predicate.volt",
            regex: /\w*:\w*/
        }, {
            token: "string.quoted.eval-ref.volt",
            regex: /\?\w+/
        }, {
            token: "constant.character.eval-math-operator.volt",
            regex: /[-+*\/><]|&&|\|\||[<>!=]=/
        }, {
            token: "constant.numeric.volt",
            regex: /[+-]?(?:\d+(?:\.\d*)?|\.\d+)/
        }, {
            token: "constant.language.volt",
            regex: /\b(?:true|false|tau|pi)\b/
        }, {
            token: "text",
            regex: /\(/,
            push: [{
                token: "text",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#expression"
            }]
        }],
        "#field-body": [{
            include: "#field-variable"
        }, {
            include: "#field-datatype"
        }, {
            include: "#field-assignment"
        }],
        "#field-variable": [{
            token: "variable.parameter.lhs-variable.volt",
            regex: /\?\w+/
        }],
        "#field-datatype": [{
            token: "text",
            regex: /\(/,
            push: [{
                token: "text",
                regex: /\)/,
                next: "pop"
            }, {
                token: "support.type.datatype.volt",
                regex: /\w*:\w*/
            }]
        }],
        "#field-assignment": [{
            token: "keyword.operator.assignment.volt",
            regex: /=/,
            push: [{
                token: "text",
                regex: /(?=$|,)/,
                next: "pop"
            }, {
                include: "#expression"
            }]
        }, {
            include: "#pattern"
        }],
        "#pattern": [{
            include: "#sparql-pattern"
        }, {
            include: "#context-pattern"
        }],
        "#sparql-pattern": [{
            token: "string.unquoted.sparql.volt",
            regex: /\{/,
            push: [{
                token: [
                    "string.unquoted.sparql.volt",
                    "string.unquoted.sparql.volt"
                ],
                regex: /(\})([^$]*)/,
                next: "pop"
            }, {
                include: "#graph"
            }, {
                defaultToken: "string.unquoted.sparql.volt"
            }]
        }],
        "#context-pattern": [{
            token: "string.unquoted.context-block.volt",
            regex: /\[/,
            push: [{
                token: "string.unquoted.context-block.volt",
                regex: /\]/,
                next: "pop"
            }, {
                include: "#graph"
            }, {
                defaultToken: "string.unquoted.context-block.volt"
            }]
        }],
        "#graph": [{
            token: "constant.language.volt",
            regex: /(?:\b(?:this|subject|property)|\W@\w+)\b/
        }, {
            token: "text",
            regex: /\[/,
            push: [{
                token: "text",
                regex: /\]/,
                next: "pop"
            }, {
                include: "#graph"
            }]
        }, {
            token: "text",
            regex: /\{/,
            push: [{
                token: "text",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#graph"
            }]
        }]
    }
    
    this.normalizeRules();
};

VoltHighlightRules.metaData = {
    name: "Volt",
    scopeName: "source.volt",
    fileTypes: ["volt"]
}


oop.inherits(VoltHighlightRules, TextHighlightRules);

exports.VoltHighlightRules = VoltHighlightRules;
});